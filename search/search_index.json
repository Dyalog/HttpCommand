{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dear Reader, Not all pages in this documentation are complete. Incomplete pages will be noted as such at the top of the page. As this page has no such notice, it's complete. HttpCommand is a utility is designed to make it easy for the APL user to send requests to and receive responses from HTTP servers like web servers and web services. HttpCommand is included with Dyalog APL as a loadable utility. To bring it into your workspace, simply do: ]load HttpCommand or, under program control, do: \u2395SE.SALT.Load 'HttpCommand' Beginning with Dyalog v18.2, you can also use the ]get user command: ]get HttpCommand HttpCommand is implemented as a Dyalog class and its typical usage pattern is: Create an instance of HttpCommand Set fields appropriate to describe the request Send the request Examine the response result For example: cmd\u2190HttpCommand.New '' \u235d create an instance cmd.Command\u2190'get' \u235d specify the HTTP method cmd.URL\u2190'www.dyalog.com' \u235d specify the URL \u22a2response\u2190cmd.Run \u235d send the request [rc: 0 | msg: \"\" | HTTP Status: 200 \"OK\" | \u2374Data: 21060] 50\u2191response.Data \u235d examine the response payload <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Trans The result of HttpCommand.Run is a namespace containing information about the response from server. The display format for the namespace gives some useful information about the success of the request. The server's response data, also known as the content or payload, is found in the Data element of the namespace. HttpCommand has several \"shortcut\" shared methods to perform common operations. For instance, the above example can be accomplished by using HttpCommand.Get . 50\u2191(HttpCommand.Get 'www.dyalog.com').Data <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Trans Dyalog Classes HttpCommand is implemented as a Dyalog class. While it's not necessary to have an in-depth knowledge of Dyalog classes, it is useful to understand a couple basic concepts. A class can have \"shared\" methods and settings (known as fields) and \"instance\" methods and settings. For instance, the \"shortcut\" methods like Get , GetJSON , Do and New are shared methods whereas the instance methods like Show and Run are only available in an HttpCommand instance. Similarly, Debug and CongaPath are shared settings whereas URL and Command are instance settings. We will attempt to make the distinction between shared and instance references throughout this documentation. Philosophy HttpCommand has been designed to be easy to integrate into your application by having a small footprint (it's a single class) and making almost no assumptions about the environment in which you'll use it. HttpComand attempts to use sensible default values for request settings while still giving the user full control should he need it. HttpCommand 's feature set has expanded over time as new use cases and feature requests have arisen. We expect this trend to continue and encourage you to submit feature requests or report any bugs via GitHub . Further Reading For more information on Dyalog classes, please refer to the Object Oriented Programming chapter in the Dyalog Programming Reference Guide . HttpCommand uses Conga, Dyalog's TCP/IP utility library, for communication. This documentation does not attempt to be an in-depth examination of either Conga or the HTTP protocol. For more information on Conga, see the Conga User Guide There are many resources available to learn about HTTP; a good one is found on the Mozilla Developer Network","title":"Overview"},{"location":"#dyalog-classes","text":"HttpCommand is implemented as a Dyalog class. While it's not necessary to have an in-depth knowledge of Dyalog classes, it is useful to understand a couple basic concepts. A class can have \"shared\" methods and settings (known as fields) and \"instance\" methods and settings. For instance, the \"shortcut\" methods like Get , GetJSON , Do and New are shared methods whereas the instance methods like Show and Run are only available in an HttpCommand instance. Similarly, Debug and CongaPath are shared settings whereas URL and Command are instance settings. We will attempt to make the distinction between shared and instance references throughout this documentation.","title":"Dyalog Classes"},{"location":"#philosophy","text":"HttpCommand has been designed to be easy to integrate into your application by having a small footprint (it's a single class) and making almost no assumptions about the environment in which you'll use it. HttpComand attempts to use sensible default values for request settings while still giving the user full control should he need it. HttpCommand 's feature set has expanded over time as new use cases and feature requests have arisen. We expect this trend to continue and encourage you to submit feature requests or report any bugs via GitHub .","title":"Philosophy"},{"location":"#further-reading","text":"For more information on Dyalog classes, please refer to the Object Oriented Programming chapter in the Dyalog Programming Reference Guide . HttpCommand uses Conga, Dyalog's TCP/IP utility library, for communication. This documentation does not attempt to be an in-depth examination of either Conga or the HTTP protocol. For more information on Conga, see the Conga User Guide There are many resources available to learn about HTTP; a good one is found on the Mozilla Developer Network","title":"Further Reading"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2021 Dyalog Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"advanced/","text":"Conga and HttpCommand Redirections Streaming with HttpCommand Authentication HTTP Basic Authentication Token-based Authentication","title":"Advanced"},{"location":"advanced/#conga-and-httpcommand","text":"","title":"Conga and HttpCommand"},{"location":"advanced/#redirections","text":"","title":"Redirections"},{"location":"advanced/#streaming-with-httpcommand","text":"","title":"Streaming with HttpCommand"},{"location":"advanced/#authentication","text":"","title":"Authentication"},{"location":"advanced/#http-basic-authentication","text":"","title":"HTTP Basic Authentication"},{"location":"advanced/#token-based-authentication","text":"","title":"Token-based Authentication"},{"location":"configuration/","text":"This page is incomplete HttpCommand 's configuration settings are grouped into four categories - Request, Conga, Operational, and Streaming. Examples below that use an instance of HttpCommand will refer to it as h as if created using h\u2190HttpCommand.New '' Request-related Settings Request-related settings are settings you use to specify attributes of the HTTP request that HttpCommand will process. Command Description The case-insensitive HTTP command (method) for the request. Command is not limited to standard HTTP methods like GET, POST, PUT, HEAD, OPTIONS, and DELETE, but can be any string provided that the host has implemented support for it. Default 'GET' Example(s) h.Command\u2190'POST' URL details Description The URL for the request. The general format for URL is: [scheme://][userinfo@]host[:port][/path][?query] At a minimum the URL must specify the host. Default '' Example(s) h.URL\u2190'dyalog.com' h.URL\u2190'https://user:pwd@adomain.com:8080/apath/?name=Drake Params details Description The parameters or payload, if any, for the request. The interpretation of Params is dependent on Command and on the content-type HTTP header. Params is interpreted as follows: If Command is either 'GET' or 'HEAD' then HttpCommand will URLencode Params and append it to the query string of the URL . (See details ) If the content-type HTTP header is 'application/x-www-form-urlencoded' (the default), HttpCommand will URLencode Params and insert it into the body of the HTTP request. (See details ) If the content-type HTTP header is 'application/json' Params will be converted to JSON format using \u2395JSON and inserted in the body of the request. Otherwise, Params will be formatted using \u220a\u2355 and inserted into the body of the request. Default '' Example(s) h.Params\u2190(('name' 'dyalog') ('age' 39)) h.Params\u2190'name=dyalog&age=39' ns\u2190\u2395NS '' \u22c4 ns.(name age)\u2190'dyalog' 39 \u22c4 h.Params\u2190ns Headers details Description The HTTP headers for the request. Specified as name/value pairs . Default By default, HttpCommand will create the following headers: Host: the host specified in URL User-Agent: 'Dyalog/HttpCommand' Accept: '*/*' If Command is not either 'GET' or 'HEAD' , HttpCommand will specify content-type: x-www-form-urlencoded except in the case where you use the GetJSON shortcut command, then HttpCommand will assign content-type: application/json HttpCommand will assign these headers at execution time only if you haven't specified them yourself. If the request has content in the request body, Conga will automatically supply a content-length header. Example(s) h.Headers\u2190('accept' 'text/html')('authorization' 'mytoken') ContentType Description This setting is a convenient shortcut for setting the content-type HTTP header of the request. If you happen set both ContentType and a content-type header, ContentType takes precedence. Default '' Example(s) h.ContentType\u2190'application/json; charset=UTF-8' Conga-related Parameters BufferSize Description The size limit for the HTTP header of the server's response. If the header exceeds this size, HttpCommand will issue a return code of 1135. Default 100000 Example(s) h.URL\u2190'dyalog.com' h.URL\u2190'https://user:pwd@adomain.com:8080/apath/?name=Drake DOSLimit TimeOut Cert SSLFlags Priority PublicCertFile PrivateKeyFile Operational Parameters SuppressHeaders WaitTime RequestOnly OutFile MaxRedirections KeepAlive TranslateData Debug Streaming Parameters Stream StreamFn StreamLimit Details URL Details A URL has the general format: [scheme://][userinfo@]host[:port][/path][?query] So, a URL can be as simple as just a host name like 'dyalog.com' or as complex as 'https://username:password@ducky.com:1234?id=myid&time=1200' The only mandatory segment is the host ; HttpCommand will infer or use default information when it builds the HTTP request to be sent. scheme - if supplied, it must be either 'http' or 'https' for a secure connection. If not supplied, HttpCommand will use 'http' unless you have specified the default HTTPS port (443) or provided SSL certificate parameters. userinfo - used for HTTP Basic authentication. HTTP Basic authentication has generally been deprecated, but may still be supported by some hosts. If userinfo is supplied, HttpCommand will create a proper Base64-encoded authorization header. host - the host/domain for the request port - if not supplied, HttpCommand will use the default HTTP port (80) unless the HTTPS scheme is used or certificate parameters are specified in which case the default HTTPS port (443) is used. path - the location of the resource within the domain. If not supplied, it's up to the domain's server to determine the default path. query - the query string for the request. If the HTTP method for the request is 'GET' or 'HEAD' and request parameters are specified in Params , HttpCommand will properly format them and append them to the query string. If you choose to supply query string parameters directly, they should be properly URLencoded. (See HttpCommand.URLencode ) Params Details If Params is to be URLencoded, either because Command is 'GET' or 'HEAD' , or the 'content-type' HTTP header is 'x-www-form-urlencoded' , HttpCommand will parse Params as follows. If Params is: A simple character vector, HttpCommand will leave it unaltered if it consists only of valid URLencode characters (as found in HttpCommand.ValidFormUrlEncodedChars ). Otherwise it will URLencode it using HttpCommand.URLencode . A Name/Value Pairs specification. If the 'content-type' HTTP header is 'application/json' , HttpCommand will interpret Params as follows: If Params is a simple character vector that is a valid JSON representation, it is left unaltered and inserted in the body of the request. Otherwise, the result of 1 \u2395JSON Params inserted in the body of the request. In all other cases, the results of \u220a\u2355Params is inserted in the body of the request. Any further preparation of Params , like Base64-encoding, is the responsibility of the user. Headers Details Name/Value Pairs Headers and, in some cases, Params are treated as name/value pairs. HttpCommand gives you some flexibility in how you specify name/value pairs. You may use: A vector of depth 2 or \u00af2 with an even number of elements. For example: ('name' 'dyalog' 'age' 39) A vector of 2-element vectors, HttpCommand will treat each sub-vector as a name/value pair. For example: (('name' 'dyalog') ('age' 39)) A 2-column matrix where each row represents a name/value pair. For example: 2 2\u2374'name' 'dyalog' 'age' 39 A reference to a namespace, HttpCommand will treat the variables and their values in the namespace as name/value pairs. For example: ns\u2190\u2395NS '' \u22c4 ns.(name age)\u2190'dyalog' 39 Note that the names will be alphabetical in the formatted output.","title":"Configuration"},{"location":"configuration/#request-related-settings","text":"Request-related settings are settings you use to specify attributes of the HTTP request that HttpCommand will process.","title":"Request-related Settings"},{"location":"configuration/#command","text":"Description The case-insensitive HTTP command (method) for the request. Command is not limited to standard HTTP methods like GET, POST, PUT, HEAD, OPTIONS, and DELETE, but can be any string provided that the host has implemented support for it. Default 'GET' Example(s) h.Command\u2190'POST'","title":"Command"},{"location":"configuration/#url","text":"details Description The URL for the request. The general format for URL is: [scheme://][userinfo@]host[:port][/path][?query] At a minimum the URL must specify the host. Default '' Example(s) h.URL\u2190'dyalog.com' h.URL\u2190'https://user:pwd@adomain.com:8080/apath/?name=Drake","title":"URL"},{"location":"configuration/#params","text":"details Description The parameters or payload, if any, for the request. The interpretation of Params is dependent on Command and on the content-type HTTP header. Params is interpreted as follows: If Command is either 'GET' or 'HEAD' then HttpCommand will URLencode Params and append it to the query string of the URL . (See details ) If the content-type HTTP header is 'application/x-www-form-urlencoded' (the default), HttpCommand will URLencode Params and insert it into the body of the HTTP request. (See details ) If the content-type HTTP header is 'application/json' Params will be converted to JSON format using \u2395JSON and inserted in the body of the request. Otherwise, Params will be formatted using \u220a\u2355 and inserted into the body of the request. Default '' Example(s) h.Params\u2190(('name' 'dyalog') ('age' 39)) h.Params\u2190'name=dyalog&age=39' ns\u2190\u2395NS '' \u22c4 ns.(name age)\u2190'dyalog' 39 \u22c4 h.Params\u2190ns","title":"Params"},{"location":"configuration/#headers","text":"details Description The HTTP headers for the request. Specified as name/value pairs . Default By default, HttpCommand will create the following headers: Host: the host specified in URL User-Agent: 'Dyalog/HttpCommand' Accept: '*/*' If Command is not either 'GET' or 'HEAD' , HttpCommand will specify content-type: x-www-form-urlencoded except in the case where you use the GetJSON shortcut command, then HttpCommand will assign content-type: application/json HttpCommand will assign these headers at execution time only if you haven't specified them yourself. If the request has content in the request body, Conga will automatically supply a content-length header. Example(s) h.Headers\u2190('accept' 'text/html')('authorization' 'mytoken')","title":"Headers"},{"location":"configuration/#contenttype","text":"Description This setting is a convenient shortcut for setting the content-type HTTP header of the request. If you happen set both ContentType and a content-type header, ContentType takes precedence. Default '' Example(s) h.ContentType\u2190'application/json; charset=UTF-8'","title":"ContentType"},{"location":"configuration/#conga-related-parameters","text":"","title":"Conga-related Parameters"},{"location":"configuration/#buffersize","text":"Description The size limit for the HTTP header of the server's response. If the header exceeds this size, HttpCommand will issue a return code of 1135. Default 100000 Example(s) h.URL\u2190'dyalog.com' h.URL\u2190'https://user:pwd@adomain.com:8080/apath/?name=Drake","title":"BufferSize"},{"location":"configuration/#doslimit","text":"","title":"DOSLimit"},{"location":"configuration/#timeout","text":"","title":"TimeOut"},{"location":"configuration/#cert","text":"","title":"Cert"},{"location":"configuration/#sslflags","text":"","title":"SSLFlags"},{"location":"configuration/#priority","text":"","title":"Priority"},{"location":"configuration/#publiccertfile","text":"","title":"PublicCertFile"},{"location":"configuration/#privatekeyfile","text":"","title":"PrivateKeyFile"},{"location":"configuration/#operational-parameters","text":"","title":"Operational Parameters"},{"location":"configuration/#suppressheaders","text":"","title":"SuppressHeaders"},{"location":"configuration/#waittime","text":"","title":"WaitTime"},{"location":"configuration/#requestonly","text":"","title":"RequestOnly"},{"location":"configuration/#outfile","text":"","title":"OutFile"},{"location":"configuration/#maxredirections","text":"","title":"MaxRedirections"},{"location":"configuration/#keepalive","text":"","title":"KeepAlive"},{"location":"configuration/#translatedata","text":"","title":"TranslateData"},{"location":"configuration/#debug","text":"","title":"Debug"},{"location":"configuration/#streaming-parameters","text":"","title":"Streaming Parameters"},{"location":"configuration/#stream","text":"","title":"Stream"},{"location":"configuration/#streamfn","text":"","title":"StreamFn"},{"location":"configuration/#streamlimit","text":"","title":"StreamLimit"},{"location":"configuration/#details","text":"","title":"Details"},{"location":"configuration/#url-details","text":"A URL has the general format: [scheme://][userinfo@]host[:port][/path][?query] So, a URL can be as simple as just a host name like 'dyalog.com' or as complex as 'https://username:password@ducky.com:1234?id=myid&time=1200' The only mandatory segment is the host ; HttpCommand will infer or use default information when it builds the HTTP request to be sent. scheme - if supplied, it must be either 'http' or 'https' for a secure connection. If not supplied, HttpCommand will use 'http' unless you have specified the default HTTPS port (443) or provided SSL certificate parameters. userinfo - used for HTTP Basic authentication. HTTP Basic authentication has generally been deprecated, but may still be supported by some hosts. If userinfo is supplied, HttpCommand will create a proper Base64-encoded authorization header. host - the host/domain for the request port - if not supplied, HttpCommand will use the default HTTP port (80) unless the HTTPS scheme is used or certificate parameters are specified in which case the default HTTPS port (443) is used. path - the location of the resource within the domain. If not supplied, it's up to the domain's server to determine the default path. query - the query string for the request. If the HTTP method for the request is 'GET' or 'HEAD' and request parameters are specified in Params , HttpCommand will properly format them and append them to the query string. If you choose to supply query string parameters directly, they should be properly URLencoded. (See HttpCommand.URLencode )","title":"URL Details"},{"location":"configuration/#params-details","text":"If Params is to be URLencoded, either because Command is 'GET' or 'HEAD' , or the 'content-type' HTTP header is 'x-www-form-urlencoded' , HttpCommand will parse Params as follows. If Params is: A simple character vector, HttpCommand will leave it unaltered if it consists only of valid URLencode characters (as found in HttpCommand.ValidFormUrlEncodedChars ). Otherwise it will URLencode it using HttpCommand.URLencode . A Name/Value Pairs specification. If the 'content-type' HTTP header is 'application/json' , HttpCommand will interpret Params as follows: If Params is a simple character vector that is a valid JSON representation, it is left unaltered and inserted in the body of the request. Otherwise, the result of 1 \u2395JSON Params inserted in the body of the request. In all other cases, the results of \u220a\u2355Params is inserted in the body of the request. Any further preparation of Params , like Base64-encoding, is the responsibility of the user.","title":"Params Details"},{"location":"configuration/#headers-details","text":"","title":"Headers Details"},{"location":"configuration/#namevalue-pairs","text":"Headers and, in some cases, Params are treated as name/value pairs. HttpCommand gives you some flexibility in how you specify name/value pairs. You may use: A vector of depth 2 or \u00af2 with an even number of elements. For example: ('name' 'dyalog' 'age' 39) A vector of 2-element vectors, HttpCommand will treat each sub-vector as a name/value pair. For example: (('name' 'dyalog') ('age' 39)) A 2-column matrix where each row represents a name/value pair. For example: 2 2\u2374'name' 'dyalog' 'age' 39 A reference to a namespace, HttpCommand will treat the variables and their values in the namespace as name/value pairs. For example: ns\u2190\u2395NS '' \u22c4 ns.(name age)\u2190'dyalog' 39 Note that the names will be alphabetical in the formatted output.","title":"Name/Value Pairs"},{"location":"conga/","text":"HttpCommand uses Conga, Dyalog's TCP/IP utility library, for communications. HttpCommand requires Conga version 3.0 or later. Conga consists of two elements: Two shared library files whose names begin with \"conga\" and are found in the Dyalog installation folder. The names of the files varies based on the platform they are running on and the specific version of Conga; for instance conga34_64.dll and conga34ssl64.dll are the shared library files for Conga version 3.4 for the 64-bit version of Dyalog for Windows. An APL-based API to communicate with the shared libraries. There are two versions of the API both of which are available in the conga workspace. A namespace named Conga which was introduced with Conga version 3.0 and implements behavior that makes it easier to run multiple Conga-based utilities in the same workspace. Conga is the recommended API version to use. A namespace named DRC which is retained for backward-compatibility with applications which use earlier versions of Conga. DRC should only be used in an application where backward compatibility is necessary. The API looks for a matching version of the shared libraries; as such version of the API and the shared libraries must be the same. For more information on Conga please refer to the Conga User Guide . Default Behavior When first run, HttpCommand will attempt find or copy the Conga API and then initialize it. HttpCommand will attempt to use the Conga version of the API in preference to the DRC version. In general, all of this is transparent to the user. Look in the current workspace for the Conga API: First look in the namespace where HttpCommand resides for a namespace named either Conga or DRC , in that order. Failing that, look in the root namespace # for a namespace named either Conga or DRC , in that order. If neither version of the API is found in the current workspace, HttpCommand will attempt to copy the API (first Conga then DRC ) from the conga workspace. The API is copied into the HttpCommand class which means there will be no additional footprint in workspace. HttpCommand will attempt to copy the API as follows: If the DYALOG environment variable exists, use its folder. Otherwise use the folder from the command line used to start Dyalog. If that fails, then attempt to copy from the \"current\" folder as determined by \u22831 \u2395NPARTS '' If the API was found or successfully copied, HttpCommand will initialize Conga as follows: If the Conga version of the API is used, HttpCommand will initialize it with a root name of 'HttpCommand' . If the DRC version of the API is used, HttpCommand will simply initialize it. As DRC does not support multiple roots, care should be taken if other Conga-using utilities also reside in the workspace. If the API was successfully initialized, a reference to the API root can be found in HttpCommand.LDRC . Overriding Default Locations There are two methods to tell HttpCommand 's default behavior, both of which involve setting a shared public field in the HttpCommand class. If you have Conga in your workspace HttpCommand.CongaRef can be used to specify the location for the API. It can be an actual reference or a character array representing the location of API. For instance: HttpCommand.CongaRef\u2190#.Utils.Conga or HttpCommand.CongaRef\u2190'#.Utils.Conga' This can be useful when integrating HttpCommand into an application that also uses Conga. HttpCommand.CongaPath can be used to specify the path to the shared library files. This can be useful when bundling HttpCommand in a distributed application. For instance: HttpCommand.CongaPath\u2190(\u22831 \u2395NPARTS ''),'/conga/' would tell HttpCommand to find the shared libraries in the /conga/ subfolder of the current folder.","title":"HttpCommand and Conga"},{"location":"conga/#default-behavior","text":"When first run, HttpCommand will attempt find or copy the Conga API and then initialize it. HttpCommand will attempt to use the Conga version of the API in preference to the DRC version. In general, all of this is transparent to the user. Look in the current workspace for the Conga API: First look in the namespace where HttpCommand resides for a namespace named either Conga or DRC , in that order. Failing that, look in the root namespace # for a namespace named either Conga or DRC , in that order. If neither version of the API is found in the current workspace, HttpCommand will attempt to copy the API (first Conga then DRC ) from the conga workspace. The API is copied into the HttpCommand class which means there will be no additional footprint in workspace. HttpCommand will attempt to copy the API as follows: If the DYALOG environment variable exists, use its folder. Otherwise use the folder from the command line used to start Dyalog. If that fails, then attempt to copy from the \"current\" folder as determined by \u22831 \u2395NPARTS '' If the API was found or successfully copied, HttpCommand will initialize Conga as follows: If the Conga version of the API is used, HttpCommand will initialize it with a root name of 'HttpCommand' . If the DRC version of the API is used, HttpCommand will simply initialize it. As DRC does not support multiple roots, care should be taken if other Conga-using utilities also reside in the workspace. If the API was successfully initialized, a reference to the API root can be found in HttpCommand.LDRC .","title":"Default Behavior"},{"location":"conga/#overriding-default-locations","text":"There are two methods to tell HttpCommand 's default behavior, both of which involve setting a shared public field in the HttpCommand class. If you have Conga in your workspace HttpCommand.CongaRef can be used to specify the location for the API. It can be an actual reference or a character array representing the location of API. For instance: HttpCommand.CongaRef\u2190#.Utils.Conga or HttpCommand.CongaRef\u2190'#.Utils.Conga' This can be useful when integrating HttpCommand into an application that also uses Conga. HttpCommand.CongaPath can be used to specify the path to the shared library files. This can be useful when bundling HttpCommand in a distributed application. For instance: HttpCommand.CongaPath\u2190(\u22831 \u2395NPARTS ''),'/conga/' would tell HttpCommand to find the shared libraries in the /conga/ subfolder of the current folder.","title":"Overriding Default Locations"},{"location":"instance/","text":"This page is incomplete","title":"Instance Methods"},{"location":"integrating/","text":"This page is incomplete","title":"Integrating HttpCommand"},{"location":"msgs/","text":"This page is incomplete HttpCommand attempts to group the values for the return code, rc , based on the circumstance of the event or error. There are three generic groups with reserved ranges for values of rc . Values of rc not listed in this document are reserved for possible future use. Group Type Values Description Pre-request \u00af1-\u00af99 Errors before HttpCommand can attempt to send the request. Request >0 Errors signalled by Conga when sending the request and receiving the response. Post-request \u00af100-\u00af199 Errors or events that occur either during the receipt of data that are not Conga-related or in post processing the response","title":"Messages and Return Codes"},{"location":"params/","text":"Params Params is the setting used to specify parameters or Params and Command and content-type The interpretation of the Params configuration parameter is dependent the Command parameter (HTTP method) and the content-type HTTP header, if present. If the HTTP method is GET or HEAD, there is no content in the request and Params is interpreted to be query parameters for the URL. For any method other than GET or HEAD, the interpretation of Params is dependent on the content-type HTTP header. The content-type header specifies the content type of the body of the HTTP request. HttpCommand recognizes two specific content-types for the convenience of its users - 'application/x-www-form-urlencoded' and 'application/json' . If the user does not specify a content-type, HttpCommand uses a default content type of 'application/x-www-form-urlencoded' . When content-type header is 'application/x-www-form-urlencoded' , Params are name/value pairs and may be represented in several ways: 1. a 2-column matrix of [;1] name [;2] value pairs - Params\u21902 2\u2374'foo' 'goo' 'moo' '\u237a*\u2395' 2. a vector of 2-item vectors of (name value) pairs - Params\u2190(('foo' 'goo')('moo' '\u237a*\u2395')) 3. a vector with an even number of elements of alternating names and values - Params\u2190'foo' 'goo' 'moo' '\u237a*\u2395' 4. a namespace with named elements assigned values - (Params\u2190\u2395NS'').(foo moo)\u2190'goo' '\u237a*\u2395' 5. a properly formatted and URL-encoded character vector - Params\u2190'foo=goo&moo=%E2%8D%BA*%E2%8E%95' HttpCommand will properly format and encode the parameters if you use forms 1-4. If the content-type header is specified as 'application/json' , HttpCommand will convert non-JSON Params to JSON format and include them in the body of the request. For all other content-types, it is incumbent upon the user to properly format Params for the content-type in use.","title":"Params"},{"location":"params/#params","text":"Params is the setting used to specify parameters or","title":"Params"},{"location":"params/#params-and-command-and-content-type","text":"The interpretation of the Params configuration parameter is dependent the Command parameter (HTTP method) and the content-type HTTP header, if present. If the HTTP method is GET or HEAD, there is no content in the request and Params is interpreted to be query parameters for the URL. For any method other than GET or HEAD, the interpretation of Params is dependent on the content-type HTTP header. The content-type header specifies the content type of the body of the HTTP request. HttpCommand recognizes two specific content-types for the convenience of its users - 'application/x-www-form-urlencoded' and 'application/json' . If the user does not specify a content-type, HttpCommand uses a default content type of 'application/x-www-form-urlencoded' . When content-type header is 'application/x-www-form-urlencoded' , Params are name/value pairs and may be represented in several ways: 1. a 2-column matrix of [;1] name [;2] value pairs - Params\u21902 2\u2374'foo' 'goo' 'moo' '\u237a*\u2395' 2. a vector of 2-item vectors of (name value) pairs - Params\u2190(('foo' 'goo')('moo' '\u237a*\u2395')) 3. a vector with an even number of elements of alternating names and values - Params\u2190'foo' 'goo' 'moo' '\u237a*\u2395' 4. a namespace with named elements assigned values - (Params\u2190\u2395NS'').(foo moo)\u2190'goo' '\u237a*\u2395' 5. a properly formatted and URL-encoded character vector - Params\u2190'foo=goo&moo=%E2%8D%BA*%E2%8E%95' HttpCommand will properly format and encode the parameters if you use forms 1-4. If the content-type header is specified as 'application/json' , HttpCommand will convert non-JSON Params to JSON format and include them in the body of the request. For all other content-types, it is incumbent upon the user to properly format Params for the content-type in use.","title":"Params and Command and content-type"},{"location":"quickstart/","text":"Shortcut Methods HttpCommand has several shared \"shortcut\" methods to perform common operations. An overview of these methods is presented here. See the Reference section of the documentation for detailed information on all features of HttpCommand. HttpCommand 's Get , Post , GetJSON , and New methods can each take a right argument which is either a vector of positional arguments or a namespace containing named arguments. Positional arguments must be supplied in the position and order shown. If you do not need to use an intermediate argument, you should supply its default value. For instance, a request that needs a Headers setting, but does not use a Params setting should set Params to its default value of '' as in: HttpCommand.Get 'www.someurl.com' '' ('accept' 'image/png') To use a namespace argument, create a namespace and assign the appropriate parameters for the request. For example: ns\u2190\u2395NS '' ns.(Command URL)\u2190'post' 'www.someurl.com' ns.Params\u2190\u2395JSON \u237310 ns.Headers\u2190'Content-Type' 'application/json' r\u2190HttpCommand.Do ns HttpCommand.Get Sends an HTTP request using the HTTP GET method. r\u2190 {ro} HttpCommand.Get URL [Params [Headers]] r\u2190 {ro} HttpCommand.Get namespace HttpCommand.Do Sends an HTTP request using the HTTP method you specify. r\u2190 {ro} HttpCommand.Do Command URL [Params [Headers]] r\u2190 {ro} HttpCommand.Do namespace HttpCommand.GetJSON Sends an HTTP request to a JSON-based web service using the HTTP method you specify. Unless otherwise specified, request parameters and response payload are automatically converted between APL and JSON. r\u2190 {ro} HttpCommand.GetJSON Command URL [Params [Headers]] r\u2190 {ro} HttpCommand.GetJSON namespace HttpCommand.New Creates a new instance of HttpCommand . To send the request use the HttpCommand.Run method. r\u2190 {ro} HttpCommand.New Command URL [Params [Headers]] r\u2190 {ro} HttpCommand.New namespace HttpCommand.Upgrade Checks if there is a newer version of HttpCommand on GitHub and if so, defines it thereby overwriting the in-workspace copy. This will not save the newer HttpCommand in the Dyalog installation folder. r is a 2-element arrat of the return code ( 0 means success) and an informational message, giving some indication why the upgrade failed if the return code is not 0. HttpCommand.Version Returns HttpCommand 's version information as a 3-element vector of 'HttpCommand' , 'major.minor.patch' version number, and the date of this version in 'YYYY-MM-DD' format HttpCommand.Documentation Returns the URL for HttpCommand 's documentation Shortcut Arguments See the Configuration section for more detail on the arguments. Each of the Get , Do , GetJSON , and New methods also accept an additional 3 positional arguments, [Cert [SSLFlags [Priority]]] . These arguments are used to specify settings for secure connections but are seldom used in practice because HttpCommand automatically supplies an anonymous certificate when using a secure connection. Name Description Default Value Command The HTTP method to use 'GET' URL The URL to which the request will be sent. If URL begins with 'https://' HttpCommand will attempt create a secure connection to the host using either an anonymous certificate it creates or Cert if it is supplied '' Params Any parameters that are to be sent with the request. '' Headers Any HTTP headers (name/value pairs) to send with the request '' ro \"Request Only\" - when set to 1, HttpCommand will compose and return the HTTP request that it would send to the host, but not actually send it. This is useful for debugging to ensure your request is properly formed. Default is 0","title":"Quick Start"},{"location":"quickstart/#shortcut-methods","text":"HttpCommand has several shared \"shortcut\" methods to perform common operations. An overview of these methods is presented here. See the Reference section of the documentation for detailed information on all features of HttpCommand. HttpCommand 's Get , Post , GetJSON , and New methods can each take a right argument which is either a vector of positional arguments or a namespace containing named arguments. Positional arguments must be supplied in the position and order shown. If you do not need to use an intermediate argument, you should supply its default value. For instance, a request that needs a Headers setting, but does not use a Params setting should set Params to its default value of '' as in: HttpCommand.Get 'www.someurl.com' '' ('accept' 'image/png') To use a namespace argument, create a namespace and assign the appropriate parameters for the request. For example: ns\u2190\u2395NS '' ns.(Command URL)\u2190'post' 'www.someurl.com' ns.Params\u2190\u2395JSON \u237310 ns.Headers\u2190'Content-Type' 'application/json' r\u2190HttpCommand.Do ns","title":"Shortcut Methods"},{"location":"quickstart/#httpcommandget","text":"Sends an HTTP request using the HTTP GET method. r\u2190 {ro} HttpCommand.Get URL [Params [Headers]] r\u2190 {ro} HttpCommand.Get namespace","title":"HttpCommand.Get"},{"location":"quickstart/#httpcommanddo","text":"Sends an HTTP request using the HTTP method you specify. r\u2190 {ro} HttpCommand.Do Command URL [Params [Headers]] r\u2190 {ro} HttpCommand.Do namespace","title":"HttpCommand.Do"},{"location":"quickstart/#httpcommandgetjson","text":"Sends an HTTP request to a JSON-based web service using the HTTP method you specify. Unless otherwise specified, request parameters and response payload are automatically converted between APL and JSON. r\u2190 {ro} HttpCommand.GetJSON Command URL [Params [Headers]] r\u2190 {ro} HttpCommand.GetJSON namespace","title":"HttpCommand.GetJSON"},{"location":"quickstart/#httpcommandnew","text":"Creates a new instance of HttpCommand . To send the request use the HttpCommand.Run method. r\u2190 {ro} HttpCommand.New Command URL [Params [Headers]] r\u2190 {ro} HttpCommand.New namespace","title":"HttpCommand.New"},{"location":"quickstart/#httpcommandupgrade","text":"Checks if there is a newer version of HttpCommand on GitHub and if so, defines it thereby overwriting the in-workspace copy. This will not save the newer HttpCommand in the Dyalog installation folder. r is a 2-element arrat of the return code ( 0 means success) and an informational message, giving some indication why the upgrade failed if the return code is not 0.","title":"HttpCommand.Upgrade"},{"location":"quickstart/#httpcommandversion","text":"Returns HttpCommand 's version information as a 3-element vector of 'HttpCommand' , 'major.minor.patch' version number, and the date of this version in 'YYYY-MM-DD' format","title":"HttpCommand.Version"},{"location":"quickstart/#httpcommanddocumentation","text":"Returns the URL for HttpCommand 's documentation","title":"HttpCommand.Documentation"},{"location":"quickstart/#shortcut-arguments","text":"See the Configuration section for more detail on the arguments. Each of the Get , Do , GetJSON , and New methods also accept an additional 3 positional arguments, [Cert [SSLFlags [Priority]]] . These arguments are used to specify settings for secure connections but are seldom used in practice because HttpCommand automatically supplies an anonymous certificate when using a secure connection. Name Description Default Value Command The HTTP method to use 'GET' URL The URL to which the request will be sent. If URL begins with 'https://' HttpCommand will attempt create a secure connection to the host using either an anonymous certificate it creates or Cert if it is supplied '' Params Any parameters that are to be sent with the request. '' Headers Any HTTP headers (name/value pairs) to send with the request '' ro \"Request Only\" - when set to 1, HttpCommand will compose and return the HTTP request that it would send to the host, but not actually send it. This is useful for debugging to ensure your request is properly formed. Default is 0","title":"Shortcut Arguments"},{"location":"release-notes/","text":"This page is incomplete","title":"Release Notes"},{"location":"result/","text":"This page is incomplete","title":"Result Namespace"},{"location":"secure/","text":"This page is incomplete","title":"Secure Communications"},{"location":"shared/","text":"This page is incomplete In addition to the shared \"shortcut\" methods listed in Quick Start , HttpCommand has a few other shared methods are intended to make it easier to manage request and response payload data. out\u2190{cpo} HttpCommand.Base64Decode b64 in Either a single-byte integer or character vector to be encoded cpo (optional) If set to 0 or not supplied, Base64Encode will first perform UTF-8 conversion on a character argument. If set to 1, no conversion will be performed. In almost all cases, you can ignore (and not supply) this argument. b64 A character vector representing the base-64 encoding of the right argument. Example(s) HttpCommand.Base64Encode 'Dyalog \u237a\u2374\u230a' RHlhbG9nIOKNuuKNtOKMig== b64\u2190{cpo} HttpCommand.Base64Encode in in Either a single-byte integer or character vector to be encoded cpo (optional) If set to 0 or not supplied, Base64Encode will first perform UTF-8 conversion on a character argument. If set to 1, no conversion will be performed. In almost all cases, you can ignore (and not supply) this argument. b64 A character vector representing the base-64 encoding of the right argument. Example(s) HttpCommand.Base64Encode 'Dyalog \u237a\u2374\u230a' RHlhbG9nIOKNuuKNtOKMig== HttpCommand.UrlDecode HttpCommand.UrlEncode","title":"Shared Methods"},{"location":"shared/#outcpo-httpcommandbase64decode-b64","text":"in Either a single-byte integer or character vector to be encoded cpo (optional) If set to 0 or not supplied, Base64Encode will first perform UTF-8 conversion on a character argument. If set to 1, no conversion will be performed. In almost all cases, you can ignore (and not supply) this argument. b64 A character vector representing the base-64 encoding of the right argument. Example(s) HttpCommand.Base64Encode 'Dyalog \u237a\u2374\u230a' RHlhbG9nIOKNuuKNtOKMig==","title":"out\u2190{cpo} HttpCommand.Base64Decode b64"},{"location":"shared/#b64cpo-httpcommandbase64encode-in","text":"in Either a single-byte integer or character vector to be encoded cpo (optional) If set to 0 or not supplied, Base64Encode will first perform UTF-8 conversion on a character argument. If set to 1, no conversion will be performed. In almost all cases, you can ignore (and not supply) this argument. b64 A character vector representing the base-64 encoding of the right argument. Example(s) HttpCommand.Base64Encode 'Dyalog \u237a\u2374\u230a' RHlhbG9nIOKNuuKNtOKMig==","title":"b64\u2190{cpo} HttpCommand.Base64Encode in"},{"location":"shared/#httpcommandurldecode","text":"","title":"HttpCommand.UrlDecode"},{"location":"shared/#httpcommandurlencode","text":"","title":"HttpCommand.UrlEncode"},{"location":"trouble/","text":"In a perfect world, all HTTP requests would be well-formed, their target hosts would be up, and their APIs well-documented. Unfortunately, we don't live in a perfect world and so, in this section, we attempt to provide you with some guidance for troubleshooting requests that aren't working as you expect. Check rc and msg If rc is non-0, msg should have relevant information about what went wrong \u2395\u2190r\u2190HttpCommand.Get '' [rc: \u00af1 | msg: No URL specified | HTTP Status: \"\" | \u2374Data: 0] r.msg No URL specified Check HttpMessage and Data If rc=0 , but HttpStatus is not what you expect, examine both HttpMessage and Data . In the example below, GitHub returns a URL pointing to their API documentation for getting information about an organization. \u2395\u2190r\u2190HttpCommand.Get 'https://api.github.com/orgs/bloofo' [rc: 0 | msg: | HTTP Status: 404 \"Not Found\" | \u2374Data: 109] r.HttpMessage Not Found r.Data {\"message\":\"Not Found\",\"documentation_url\":\"https://docs.github.com/rest/reference/orgs#get-an-organization\"} Examine the request that HttpCommand will send It can be useful to examine the actual request that HttpCommand will send to the host, particularly when interacting with web services that publish sample requests. The instance setting RequestOnly controls whether HttpCommand will send the request to the host or simply return the request that would be sent to the host. You can make use of RequestOnly in several ways: Pass 1 as the optional left argument to the shortcut methods Get , GetJSON , or Do . 1 HttpCommand.GetJSON 'post' 'www.someurl.net' (\u237310) ('a-header' 'header value') POST / HTTP/1.1 a-header: header value Host: www.someurl.net User-Agent: Dyalog/HttpCommand Accept: */* Content-Type: application/json;charset=utf-8 Content-Length: 22 [1,2,3,4,5,6,7,8,9,10] Pass 1 as the optional left argument to the New shortcut method and then run the Run method. Be sure to set RequestOnly back to 0 before sending the request to the host. c \u2190 1 HttpCommand.New 'get' 'dyalog.com' c.Run GET / HTTP/1.1 Host: dyalog.com User-Agent: Dyalog/HttpCommand Accept: */* c.RequestOnly\u21900 c.Run [rc: 0 | msg: | HTTP Status: 200 \"OK\" | \u2374Data: 20684] Use the Show instance method. c \u2190 HttpCommand.New '' c.URL \u2190 'someurl.com/stuff' c.Command \u2190 'get' c.Params \u2190 'name' 'Drake Mallard' 'header-name' c.AddHeader 'header value' c.Show GET /stuff?name=Drake%20Mallard HTTP/1.1 header-name: header value Host: someurl.com User-Agent: Dyalog/HttpCommand Accept: */*","title":"Troubleshooting"},{"location":"trouble/#check-rc-and-msg","text":"If rc is non-0, msg should have relevant information about what went wrong \u2395\u2190r\u2190HttpCommand.Get '' [rc: \u00af1 | msg: No URL specified | HTTP Status: \"\" | \u2374Data: 0] r.msg No URL specified","title":"Check rc and msg"},{"location":"trouble/#check-httpmessage-and-data","text":"If rc=0 , but HttpStatus is not what you expect, examine both HttpMessage and Data . In the example below, GitHub returns a URL pointing to their API documentation for getting information about an organization. \u2395\u2190r\u2190HttpCommand.Get 'https://api.github.com/orgs/bloofo' [rc: 0 | msg: | HTTP Status: 404 \"Not Found\" | \u2374Data: 109] r.HttpMessage Not Found r.Data {\"message\":\"Not Found\",\"documentation_url\":\"https://docs.github.com/rest/reference/orgs#get-an-organization\"}","title":"Check HttpMessage and Data"},{"location":"trouble/#examine-the-request-that-httpcommand-will-send","text":"It can be useful to examine the actual request that HttpCommand will send to the host, particularly when interacting with web services that publish sample requests. The instance setting RequestOnly controls whether HttpCommand will send the request to the host or simply return the request that would be sent to the host. You can make use of RequestOnly in several ways: Pass 1 as the optional left argument to the shortcut methods Get , GetJSON , or Do . 1 HttpCommand.GetJSON 'post' 'www.someurl.net' (\u237310) ('a-header' 'header value') POST / HTTP/1.1 a-header: header value Host: www.someurl.net User-Agent: Dyalog/HttpCommand Accept: */* Content-Type: application/json;charset=utf-8 Content-Length: 22 [1,2,3,4,5,6,7,8,9,10] Pass 1 as the optional left argument to the New shortcut method and then run the Run method. Be sure to set RequestOnly back to 0 before sending the request to the host. c \u2190 1 HttpCommand.New 'get' 'dyalog.com' c.Run GET / HTTP/1.1 Host: dyalog.com User-Agent: Dyalog/HttpCommand Accept: */* c.RequestOnly\u21900 c.Run [rc: 0 | msg: | HTTP Status: 200 \"OK\" | \u2374Data: 20684] Use the Show instance method. c \u2190 HttpCommand.New '' c.URL \u2190 'someurl.com/stuff' c.Command \u2190 'get' c.Params \u2190 'name' 'Drake Mallard' 'header-name' c.AddHeader 'header value' c.Show GET /stuff?name=Drake%20Mallard HTTP/1.1 header-name: header value Host: someurl.com User-Agent: Dyalog/HttpCommand Accept: */*","title":"Examine the request that HttpCommand will send"},{"location":"usecases/","text":"This page is incomplete Interacting with Web Services Web services will generally have a published API which describes how to interact with the service. This will be your guide for how to build requests using HttpCommand to access the web service. The API will generally describe the format of the data it returns in the content-type header. A web service may require authentication in order to gain access to certain resources or perform certain operations. GitHub is a good example of this - it does not require authentication to perform read-only queries on public resources, but authentication is necessary to perform write operations or to access private repositories. Let's look at GitHub's REST API as an example. First, it returns its data in JSON format. c\u2190HttpCommand.New 'get' 'https://api.github.com/orgs/Dyalog' \u2395\u2190r\u2190c.Run \u235d send the request [rc: 0 | msg: | HTTP Status: 200 \"OK\" | \u2374Data: 1101] r.Headers HttpCommand.Lookup 'content-type' \u235d what's the content-type? application/json; charset=utf-8 50\u2191r.Data \u235d take a look at the data {\"login\":\"Dyalog\",\"id\":4189495,\"node_id\":\"MDEyOk9y d\u2190\u2395JSON r.Data d.(name public_repos) Dyalog 47 HTTP Basic Authentication Token-based Authentication Interacting with Jarvis Downloading a Web Page Downloading a File Downloading a Large File Streaming Redirections Authentication","title":"Examples"},{"location":"usecases/#interacting-with-web-services","text":"Web services will generally have a published API which describes how to interact with the service. This will be your guide for how to build requests using HttpCommand to access the web service. The API will generally describe the format of the data it returns in the content-type header. A web service may require authentication in order to gain access to certain resources or perform certain operations. GitHub is a good example of this - it does not require authentication to perform read-only queries on public resources, but authentication is necessary to perform write operations or to access private repositories. Let's look at GitHub's REST API as an example. First, it returns its data in JSON format. c\u2190HttpCommand.New 'get' 'https://api.github.com/orgs/Dyalog' \u2395\u2190r\u2190c.Run \u235d send the request [rc: 0 | msg: | HTTP Status: 200 \"OK\" | \u2374Data: 1101] r.Headers HttpCommand.Lookup 'content-type' \u235d what's the content-type? application/json; charset=utf-8 50\u2191r.Data \u235d take a look at the data {\"login\":\"Dyalog\",\"id\":4189495,\"node_id\":\"MDEyOk9y d\u2190\u2395JSON r.Data d.(name public_repos) Dyalog 47","title":"Interacting with Web Services"},{"location":"usecases/#http-basic-authentication","text":"","title":"HTTP Basic Authentication"},{"location":"usecases/#token-based-authentication","text":"","title":"Token-based Authentication"},{"location":"usecases/#interacting-with-jarvis","text":"","title":"Interacting with Jarvis"},{"location":"usecases/#downloading-a-web-page","text":"","title":"Downloading a Web Page"},{"location":"usecases/#downloading-a-file","text":"","title":"Downloading a File"},{"location":"usecases/#downloading-a-large-file","text":"","title":"Downloading a Large File"},{"location":"usecases/#streaming","text":"","title":"Streaming"},{"location":"usecases/#redirections","text":"","title":"Redirections"},{"location":"usecases/#authentication","text":"","title":"Authentication"},{"location":"userguide/","text":"This page is incomplete Shortcut or Instance? There are two common ways to use HttpCommand . Use one of its shortcut methods ( Get , Do , GetJSON ) to execute a single HTTP request and examine the response from the host. When you use a shortcut method, HttpCommand will create a new local instance of itself, use the instance's Run method to send the request and receive the response, then exit thereby destroying the local instance. This is generally fine when your requests are independent of one another and do not require any state to be maintained across requests. Create an instance of HttpCommand using \u2395NEW or the New shared method, set whatever parameters are necessary, execute the Run method, and examine the response from the host. Creating an instance of HttpCommand and using the Run method to send the request and receive the response will persist the instance such that state information such as connection information and HTTP cookies will be retained across requests. HttpCommand 's Result The result of the Run method is a namespace containing information related to the result of the request. The display format ( \u2395DF ) of the result presents some useful information. \u22a2r \u2190 HttpCommand.Get 'https://www.dyalog.com' [rc: 0 | msg: | HTTP Status: 200 \"OK\" | \u2374Data: 20571] r is the namespace result r.rc is the HttpCommand 's numeric return code. 0 means HttpCommand was able to create the request to send to the host. If rc is less than 0, it means there was some problem sending the request or processing the response. If rc is greater than 0, it is the Conga return code and generally means that Conga returned something unexpected. r.msg is a (hopefully meaningful) message describing whatever the issue was if r.rc is non-zero. r.HttpStatus is the numeric HTTP status code returned by the host. A status code in the range 200-299 indicates a successful HTTP response with 200 being the most common code. r.HttpMessage is HTTP status message returned by the host. r.Data is the payload of the response, if any, returned by the host. The result namespace contains other elements which are described in detail here . Typical Use in Code Typical use of HttpCommand might follow this pattern. r \u2190 HttpCommand.Get 'some-url' :If 0 200 \u2262 r.(rc HttpStatus) \u235d Request failed take some appropriate action here :EndIf \u235d process the response","title":"User Guide"},{"location":"userguide/#shortcut-or-instance","text":"There are two common ways to use HttpCommand . Use one of its shortcut methods ( Get , Do , GetJSON ) to execute a single HTTP request and examine the response from the host. When you use a shortcut method, HttpCommand will create a new local instance of itself, use the instance's Run method to send the request and receive the response, then exit thereby destroying the local instance. This is generally fine when your requests are independent of one another and do not require any state to be maintained across requests. Create an instance of HttpCommand using \u2395NEW or the New shared method, set whatever parameters are necessary, execute the Run method, and examine the response from the host. Creating an instance of HttpCommand and using the Run method to send the request and receive the response will persist the instance such that state information such as connection information and HTTP cookies will be retained across requests.","title":"Shortcut or Instance?"},{"location":"userguide/#httpcommands-result","text":"The result of the Run method is a namespace containing information related to the result of the request. The display format ( \u2395DF ) of the result presents some useful information. \u22a2r \u2190 HttpCommand.Get 'https://www.dyalog.com' [rc: 0 | msg: | HTTP Status: 200 \"OK\" | \u2374Data: 20571] r is the namespace result r.rc is the HttpCommand 's numeric return code. 0 means HttpCommand was able to create the request to send to the host. If rc is less than 0, it means there was some problem sending the request or processing the response. If rc is greater than 0, it is the Conga return code and generally means that Conga returned something unexpected. r.msg is a (hopefully meaningful) message describing whatever the issue was if r.rc is non-zero. r.HttpStatus is the numeric HTTP status code returned by the host. A status code in the range 200-299 indicates a successful HTTP response with 200 being the most common code. r.HttpMessage is HTTP status message returned by the host. r.Data is the payload of the response, if any, returned by the host. The result namespace contains other elements which are described in detail here .","title":"HttpCommand's Result"},{"location":"userguide/#typical-use-in-code","text":"Typical use of HttpCommand might follow this pattern. r \u2190 HttpCommand.Get 'some-url' :If 0 200 \u2262 r.(rc HttpStatus) \u235d Request failed take some appropriate action here :EndIf \u235d process the response","title":"Typical Use in Code"}]}